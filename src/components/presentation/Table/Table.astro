---
import SelectFilter from "./SelectFilter.astro";
import StateChip from "./StateChip.astro";
import TableRow from "./TableRow.astro";
---

<script>
  import type { PresentationData } from "../../../scripts/alpine/presentationData";

  document.addEventListener("alpine:init", () => {
    Alpine.data("presentations", () => {
      return {
        presentations: [] as PresentationData["presentationOrder"],
        filter: {
          rotation: "",
          keyword: "",
          sortCriteria: null,
        },
        init() {
          this.presentations = (
            Alpine.store("presentationData") as PresentationData
          ).presentationOrder;
        },
        get filteredPresentations() {
          let result = this.presentations;

          if (this.filter.rotation !== "") {
            result = result.filter((p) => p.rotation === this.filter.rotation);
          }

          if (this.filter.keyword !== "") {
            result = result.filter((p) =>
              p.name.toLowerCase().includes(this.filter.keyword.toLowerCase())
            );
          }
          if (this.filter.sortCriteria) {
            const { category, ascending } = this.filter.sortCriteria;
            if (category === "date") {
              result = result.sort((a, b) => {
                const dateA =
                  (Alpine.store("presentationData") as PresentationData)
                    .groupPresentationDates[a.id]?.date || "";
                const dateB =
                  (Alpine.store("presentationData") as PresentationData)
                    .groupPresentationDates[b.id]?.date || "";
                if (dateA < dateB) return ascending ? -1 : 1;
                if (dateA > dateB) return ascending ? 1 : -1;
                return 0;
              });
            }
          }
          return result;
        },
      };
    });
  });
  interface FilterOption {
    label: string;
    value: { category: string; ascending: boolean };
  }
  document.addEventListener("alpine:init", () => {
    Alpine.data(
      "selectFilter",
      (onChange: (value: FilterOption["value"] | null) => void) => {
        return {
          open: false,
          options: [
            {
              label: "Más Próximo",
              value: { category: "date", ascending: true },
            },
            {
              label: "Más Lejano",
              value: { category: "date", ascending: false },
            },
          ],
          selected: null as FilterOption | null,
          init() {
            this.selected = this.options[0];
            this.$watch("selected", (option) => {
              onChange(option?.value || null);
            });
          },
        };
      }
    );
  });
</script>
<template x-if="$store.presentationData.presentationOrder.length > 0">
  <div
    class="font-poppins flex flex-col px-12 py-8 rounded-4xl bg-white gap-y-5"
    x-data="presentations()"
    x-effect="filter.rotation = $store.studentData.rotation"
  >
    <div class="flex items-end gap-x-14">
      <div class="flex flex-col gap-y-2 grow">
        <h2 class="font-semibold text-lg">Listado de orden de presentación</h2>
        <h3 class="text-light-sea-green text-sm">
          Ciclo lectivo <span x-text="(new Date()).getFullYear();"></span>
        </h3>
      </div>
      <div
        class="flex items-center justify-center px-4 py-3 bg-ghost-white rounded-xl gap-x-6 w-1/4"
      >
        <img
          class="w-4 h-4"
          :src="$store.pageData.publicURL('icons/search.svg')"
          alt=""
        />
        <input
          class="font-poppins grow focus:outline-non text-xs"
          type="text"
          placeholder="Buscar"
          x-model="filter.keyword"
        />
      </div>
      <SelectFilter onChange="(value) => filter.sortCriteria = value" />
    </div>
    <div class="grid grid-cols-6">
      <TableRow>
        <span class="text-gray">Nombre del grupo</span>
        <span class="text-gray">Fecha estimada</span>
        <span class="text-gray">Bloque estimado</span>
        <span class="text-gray">Rotación</span>
        <span class="text-gray">Instancia</span>
        <span class="text-gray">Estado del grupo</span>
      </TableRow>
      <template
        x-for="presentation in filteredPresentations"
        :key="presentation.instance + '-' + presentation.id"
      >
        <TableRow>
          <span class="text-[#292D32]" x-text="presentation.name"></span>
          <span
            class="text-[#292D32]"
            x-text="$store.presentationData.groupPresentationDates[presentation.id]?.date ? $store.presentationData.showDate($store.presentationData.groupPresentationDates[presentation.id].date) : '---'"
          ></span>
          <span
            class="text-[#292D32]"
            x-text="$store.presentationData.groupPresentationDates[presentation.id] ? $store.presentationData.groupPresentationDates[presentation.id].block + '° bloque' : '---'"
          ></span>
          <span class="text-[#292D32]" x-text="presentation.rotation"></span>
          <span
            class="text-[#292D32]"
            x-text="presentation.instance + '° ronda'"></span>
          <StateChip type="presentation.state" />
        </TableRow>
      </template>
    </div>
  </div>
</template>
